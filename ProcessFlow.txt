Initialisation:
Step 1: Generate global graph for the process layout, which includes all possible paths between workstations (SOLVED)
Step 2: Generate all combinations for each mix, (SOLVED)
		and reduce to only logical combinations. (SOLVED)


Runtime:
// Internal
Step 3: Given a specific mix, we return the best combination at a given time. (SOLVED)
Step 4: Use the combination and the current global graph, to generate a path (SOLVED)
Step 5: Use the path to update the current weight in the global graph. (We can update the weights but don't know how/where)
// External
Step 6: Use the path to make the shuttle move (Anton)



Anton:
	Because replanning might require shuttles to move backwards, they LayoutGraph now has backwards edges.
    Creates new class (Shuttle) for managing the internal state of each shuttle e.g. current position, stations left in mix, etc.
    Created a class called shuttleManager that contains all shuttles
    Implemented replanning function that is executed when a collision appears, in the following way:
    4.1) Find colors left in production order
    4.2) Find each distinct permutation
    4.3) For each distinct permutation create a new graph, weighted based on a heuristic
    4.4) Remove collision edge/node from the new graph
    4.5) For each graph perform djikstra or A* (djikstra right now) to find the best path
    4.6) Sort them using a min-heap, and return the best station combination
    4.7) Find path based on best station combination -> if no path found return
    4.8) Get movements from path and set new movements for shuttlke
